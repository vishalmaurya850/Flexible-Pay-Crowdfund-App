{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "kernel_address",
    "recipients"
  ],
  "properties": {
    "kernel_address": {
      "type": "string"
    },
    "lock_time": {
      "anyOf": [
        {
          "$ref": "#/definitions/Milliseconds"
        },
        {
          "type": "null"
        }
      ]
    },
    "owner": {
      "type": [
        "string",
        "null"
      ]
    },
    "recipients": {
      "description": "The vector of recipients for the contract. Anytime a `Send` execute message is sent the amount sent will be divided amongst these recipients depending on their assigned percentage.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/AddressPercent"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AddressPercent": {
      "type": "object",
      "required": [
        "percent",
        "recipient"
      ],
      "properties": {
        "percent": {
          "$ref": "#/definitions/Decimal"
        },
        "recipient": {
          "$ref": "#/definitions/Recipient"
        }
      },
      "additionalProperties": false
    },
    "AndrAddr": {
      "description": "An address that can be used within the Andromeda ecosystem. Inspired by the cosmwasm-std `Addr` type. https://github.com/CosmWasm/cosmwasm/blob/2a1c698520a1aacedfe3f4803b0d7d653892217a/packages/std/src/addresses.rs#L33\n\nThis address can be one of two things: 1. A valid human readable address e.g. `cosmos1...` 2. A valid Andromeda VFS path e.g. `/home/user/app/component`\n\nVFS paths can be local in the case of an app and can be done by referencing `./component` they can also contain protocols for cross chain communication. A VFS path is usually structured as so:\n\n`<protocol>://<chain (required if ibc used)>/<path>` or `ibc://cosmoshub-4/user/app/component`",
      "type": "string",
      "pattern": "(^((([A-Za-z0-9]+://)?([A-Za-z0-9.\\-_]{2,80}/)))?((~[a-z0-9]{2,}|(lib|home))(/[A-Za-z0-9.\\-_]{2,80}?)*(/)?)$)|(^(~[a-z0-9]{2,}|/(lib|home))(/[A-Za-z0-9.\\-_]{2,80}?)*(/)?$)|(^[a-z0-9]{2,}$)|(^\\.(/[A-Za-z0-9.\\-_]{2,40}?)*(/)?$)"
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Milliseconds": {
      "description": "Represents time in milliseconds.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "Recipient": {
      "description": "A simple struct used for inter-contract communication. The struct can be used in two ways:\n\n1. Simply just providing an `AndrAddr` which will treat the communication as a transfer of any related funds 2. Providing an `AndrAddr` and a `Binary` message which will be sent to the contract at the resolved address\n\nThe `Binary` message can be any message that the contract at the resolved address can handle.",
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/AndrAddr"
        },
        "ibc_recovery_address": {
          "anyOf": [
            {
              "$ref": "#/definitions/AndrAddr"
            },
            {
              "type": "null"
            }
          ]
        },
        "msg": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    }
  }
}
