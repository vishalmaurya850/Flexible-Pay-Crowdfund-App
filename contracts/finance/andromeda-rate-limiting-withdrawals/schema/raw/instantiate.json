{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "allowed_coin",
    "kernel_address",
    "minimal_withdrawal_frequency"
  ],
  "properties": {
    "allowed_coin": {
      "$ref": "#/definitions/CoinAndLimit"
    },
    "kernel_address": {
      "type": "string"
    },
    "minimal_withdrawal_frequency": {
      "$ref": "#/definitions/MinimumFrequency"
    },
    "modules": {
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/Module"
      }
    },
    "owner": {
      "type": [
        "string",
        "null"
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AndrAddr": {
      "description": "An address that can be used within the Andromeda ecosystem. Inspired by the cosmwasm-std `Addr` type. https://github.com/CosmWasm/cosmwasm/blob/2a1c698520a1aacedfe3f4803b0d7d653892217a/packages/std/src/addresses.rs#L33\n\nThis address can be one of two things: 1. A valid human readable address e.g. `cosmos1...` 2. A valid Andromeda VFS path e.g. `/home/user/app/component`\n\nVFS paths can be local in the case of an app and can be done by referencing `./component` they can also contain protocols for cross chain communication. A VFS path is usually structured as so:\n\n`<protocol>://<chain (required if ibc used)>/<path>` or `ibc://cosmoshub-4/user/app/component`",
      "type": "string",
      "pattern": "(^((([A-Za-z0-9]+://)?([A-Za-z0-9.\\-_]{2,80}/)))?((~[a-z0-9]{2,}|(lib|home))(/[A-Za-z0-9.\\-_]{2,80}?)*(/)?)$)|(^(~[a-z0-9]{2,}|/(lib|home))(/[A-Za-z0-9.\\-_]{2,80}?)*(/)?$)|(^[a-z0-9]{2,}$)|(^\\.(/[A-Za-z0-9.\\-_]{2,40}?)*(/)?$)"
    },
    "CoinAndLimit": {
      "type": "object",
      "required": [
        "coin",
        "limit"
      ],
      "properties": {
        "coin": {
          "description": "Sets the accepted coin denom",
          "type": "string"
        },
        "limit": {
          "description": "Sets the withdrawal limit in terms of amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Milliseconds": {
      "description": "Represents time in milliseconds.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "MinimumFrequency": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "type": "object",
              "required": [
                "time"
              ],
              "properties": {
                "time": {
                  "$ref": "#/definitions/Milliseconds"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Module": {
      "description": "A struct describing a token module, provided with the instantiation message this struct is used to record the info about the module and how/if it should be instantiated",
      "type": "object",
      "required": [
        "address",
        "is_mutable"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/AndrAddr"
        },
        "is_mutable": {
          "type": "boolean"
        },
        "name": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
