{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "GetLockedFundsForRecipientResponse",
  "type": "object",
  "required": [
    "funds"
  ],
  "properties": {
    "funds": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Escrow"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AndrAddr": {
      "description": "An address that can be used within the Andromeda ecosystem. Inspired by the cosmwasm-std `Addr` type. https://github.com/CosmWasm/cosmwasm/blob/2a1c698520a1aacedfe3f4803b0d7d653892217a/packages/std/src/addresses.rs#L33\n\nThis address can be one of two things: 1. A valid human readable address e.g. `cosmos1...` 2. A valid Andromeda VFS path e.g. `/home/user/app/component`\n\nVFS paths can be local in the case of an app and can be done by referencing `./component` they can also contain protocols for cross chain communication. A VFS path is usually structured as so:\n\n`<protocol>://<chain (required if ibc used)>/<path>` or `ibc://cosmoshub-4/user/app/component`",
      "type": "string",
      "pattern": "(^((([A-Za-z0-9]+://)?([A-Za-z0-9.\\-_]{2,80}/)))?((~[a-z0-9]{2,}|(lib|home))(/[A-Za-z0-9.\\-_]{2,80}?)*(/)?)$)|(^(~[a-z0-9]{2,}|/(lib|home))(/[A-Za-z0-9.\\-_]{2,80}?)*(/)?$)|(^[a-z0-9]{2,}$)|(^\\.(/[A-Za-z0-9.\\-_]{2,40}?)*(/)?$)"
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Escrow": {
      "description": "Struct used to define funds being held in Escrow",
      "type": "object",
      "required": [
        "coins",
        "recipient",
        "recipient_addr"
      ],
      "properties": {
        "coins": {
          "description": "Funds being held within the Escrow",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "condition": {
          "description": "Optional condition for the Escrow",
          "anyOf": [
            {
              "$ref": "#/definitions/EscrowCondition"
            },
            {
              "type": "null"
            }
          ]
        },
        "recipient": {
          "description": "The recipient of the funds once Condition is satisfied",
          "allOf": [
            {
              "$ref": "#/definitions/Recipient"
            }
          ]
        },
        "recipient_addr": {
          "description": "Used for indexing.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "EscrowCondition": {
      "description": "Enum used to specify the condition which must be met in order for the Escrow to unlock.",
      "oneOf": [
        {
          "description": "Requires a given time or block height to be reached.",
          "type": "object",
          "required": [
            "expiration"
          ],
          "properties": {
            "expiration": {
              "$ref": "#/definitions/Milliseconds"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Requires a minimum amount of funds to be deposited.",
          "type": "object",
          "required": [
            "minimum_funds"
          ],
          "properties": {
            "minimum_funds": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Milliseconds": {
      "description": "Represents time in milliseconds.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "Recipient": {
      "description": "A simple struct used for inter-contract communication. The struct can be used in two ways:\n\n1. Simply just providing an `AndrAddr` which will treat the communication as a transfer of any related funds 2. Providing an `AndrAddr` and a `Binary` message which will be sent to the contract at the resolved address\n\nThe `Binary` message can be any message that the contract at the resolved address can handle.",
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/AndrAddr"
        },
        "ibc_recovery_address": {
          "anyOf": [
            {
              "$ref": "#/definitions/AndrAddr"
            },
            {
              "type": "null"
            }
          ]
        },
        "msg": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
