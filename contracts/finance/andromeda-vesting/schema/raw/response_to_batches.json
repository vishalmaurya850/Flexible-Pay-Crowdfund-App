{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Array_of_BatchResponse",
  "type": "array",
  "items": {
    "$ref": "#/definitions/BatchResponse"
  },
  "definitions": {
    "BatchResponse": {
      "type": "object",
      "required": [
        "amount",
        "amount_available_to_claim",
        "amount_claimed",
        "id",
        "last_claimed_release_time",
        "lockup_end",
        "number_of_available_claims",
        "release_amount",
        "release_unit"
      ],
      "properties": {
        "amount": {
          "description": "The amount of tokens in the batch",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "amount_available_to_claim": {
          "description": "The amount of tokens available to claim right now.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "amount_claimed": {
          "description": "The amount of tokens that have been claimed.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "id": {
          "description": "The id.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "last_claimed_release_time": {
          "description": "The time at which the last claim took place in seconds.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "lockup_end": {
          "description": "When the lockup ends.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "number_of_available_claims": {
          "description": "The number of available claims.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "release_amount": {
          "description": "Specifies how much is to be released after each `release_unit`. If it is a percentage, it would be the percentage of the original amount.",
          "allOf": [
            {
              "$ref": "#/definitions/WithdrawalType"
            }
          ]
        },
        "release_unit": {
          "description": "How often releases occur.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "WithdrawalType": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "percentage"
          ],
          "properties": {
            "percentage": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
