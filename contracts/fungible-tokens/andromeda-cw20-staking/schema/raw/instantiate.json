{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "kernel_address",
    "staking_token"
  ],
  "properties": {
    "additional_rewards": {
      "description": "Any rewards in addition to the staking token. This list cannot include the staking token.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/RewardTokenUnchecked"
      }
    },
    "kernel_address": {
      "type": "string"
    },
    "modules": {
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/Module"
      }
    },
    "owner": {
      "type": [
        "string",
        "null"
      ]
    },
    "staking_token": {
      "description": "The cw20 token that can be staked.",
      "allOf": [
        {
          "$ref": "#/definitions/AndrAddr"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AllocationConfig": {
      "type": "object",
      "required": [
        "cycle_duration",
        "cycle_rewards",
        "till_timestamp"
      ],
      "properties": {
        "cycle_duration": {
          "description": "Cycle duration in timestamps",
          "allOf": [
            {
              "$ref": "#/definitions/Milliseconds"
            }
          ]
        },
        "cycle_rewards": {
          "description": "Rewards distributed during the 1st cycle.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "reward_increase": {
          "description": "Percent increase in Rewards per cycle",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "till_timestamp": {
          "description": "Timestamp till which Rewards will be accrued. No staking rewards are accrued beyond this timestamp",
          "allOf": [
            {
              "$ref": "#/definitions/Milliseconds"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AndrAddr": {
      "description": "An address that can be used within the Andromeda ecosystem. Inspired by the cosmwasm-std `Addr` type. https://github.com/CosmWasm/cosmwasm/blob/2a1c698520a1aacedfe3f4803b0d7d653892217a/packages/std/src/addresses.rs#L33\n\nThis address can be one of two things: 1. A valid human readable address e.g. `cosmos1...` 2. A valid Andromeda VFS path e.g. `/home/user/app/component`\n\nVFS paths can be local in the case of an app and can be done by referencing `./component` they can also contain protocols for cross chain communication. A VFS path is usually structured as so:\n\n`<protocol>://<chain (required if ibc used)>/<path>` or `ibc://cosmoshub-4/user/app/component`",
      "type": "string",
      "pattern": "(^((([A-Za-z0-9]+://)?([A-Za-z0-9.\\-_]{2,80}/)))?((~[a-z0-9]{2,}|(lib|home))(/[A-Za-z0-9.\\-_]{2,80}?)*(/)?)$)|(^(~[a-z0-9]{2,}|/(lib|home))(/[A-Za-z0-9.\\-_]{2,80}?)*(/)?$)|(^[a-z0-9]{2,}$)|(^\\.(/[A-Za-z0-9.\\-_]{2,40}?)*(/)?$)"
    },
    "AssetInfoBase_for_String": {
      "description": "Represents the type of an fungible asset.\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Milliseconds": {
      "description": "Represents time in milliseconds.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "Module": {
      "description": "A struct describing a token module, provided with the instantiation message this struct is used to record the info about the module and how/if it should be instantiated",
      "type": "object",
      "required": [
        "address",
        "is_mutable"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/AndrAddr"
        },
        "is_mutable": {
          "type": "boolean"
        },
        "name": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "RewardTokenUnchecked": {
      "type": "object",
      "required": [
        "asset_info",
        "init_timestamp"
      ],
      "properties": {
        "allocation_config": {
          "anyOf": [
            {
              "$ref": "#/definitions/AllocationConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "asset_info": {
          "$ref": "#/definitions/AssetInfoBase_for_String"
        },
        "init_timestamp": {
          "$ref": "#/definitions/Milliseconds"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
